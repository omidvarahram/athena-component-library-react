name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop, feature/*, fix/* ]

# Grant GITHUB_TOKEN the permissions required by semantic-release
permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  # üß™ Quality Checks
  quality:
    name: üß™ Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          
      - name: üì• Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: üìù Lint code
        run: yarn lint
        
      - name: üß™ Run tests with coverage
        run: yarn test --coverage
        
      - name: üîí Security audit
        run: yarn audit --groups dependencies
        
      - name: üèóÔ∏è Build package
        run: yarn build
        
      - name: üìä Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # üè∑Ô∏è Version & Release (on merge to master)
  release:
    name: üè∑Ô∏è Release & Publish
    runs-on: ubuntu-latest
    needs: quality
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: true
          
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          registry-url: 'https://registry.npmjs.org'
          
      - name: üì• Install dependencies
        run: yarn install --frozen-lockfile
        
      # Run semantic-release for automated versioning and publishing
      - name: üè∑Ô∏è Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.ATHENA_CL_SECRETS_NPM }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
        run: |
          # Configure git with GitHub Actions bot credentials
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          echo "üîç Analyzing commits for release..."
          
          # Run semantic-release
          npx semantic-release
          
      # Build package AFTER version update
      - name: üèóÔ∏è Build package with updated version
        run: yarn build
          
      # Publish to NPM (after semantic-release creates the package)  
      - name: üì¶ Publish to NPM
        if: success()
        env:
          NPM_TOKEN: ${{ secrets.ATHENA_CL_SECRETS_NPM }}
        run: |
          if [ -f "build/package.json" ]; then
            echo "üì¶ Publishing to NPM..."
            cd build
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
            npm publish --access public
            echo "‚úÖ Published successfully!"
          else
            echo "‚ö†Ô∏è  No release was created by semantic-release"
          fi
